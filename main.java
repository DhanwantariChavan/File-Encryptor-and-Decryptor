/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */


package fileencryptor;
import javax.swing.JFileChooser; 
import javax.swing.JOptionPane;  
import java.io.File;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import java.io.*;
import java.security.*;
import java.security.spec.PKCS8EncodedKeySpec;
import java.util.Arrays;
import java.util.Base64;
import java.security.MessageDigest;



/**
 *
 * @author Dhanwantari
 */
public class main extends javax.swing.JFrame {

    /**
     * Creates new form main
     */
    public main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jPasswordField2 = new javax.swing.JPasswordField();
        jButton4 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("File Encryptor ");

        jLabel1.setBackground(new java.awt.Color(153, 204, 255));
        jLabel1.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 153));
        jLabel1.setText("File Encryptor and Decryptor");

        jLabel2.setText("Select Algorithm");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AES", "DES", "RSA" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel3.setText("Enter password: ");

        jButton1.setText("Encrypt file");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Decrypt file");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Select file");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jPasswordField2.setText("Enter Password");
        jPasswordField2.setMinimumSize(new java.awt.Dimension(80, 22));
        jPasswordField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPasswordField2ActionPerformed(evt);
            }
        });

        jButton4.setText("Show");
        jButton4.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton2))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jPasswordField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton4))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel2)
                                            .addComponent(jButton3))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(jLabel4))
                                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(0, 92, Short.MAX_VALUE)))))
                .addGap(50, 50, 50))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jLabel4)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jPasswordField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4))
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(44, 44, 44))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
     // Get the entered password from jPasswordField2
    char[] password = jPasswordField2.getPassword(); 

    // Check if the password is empty
    if (password.length == 0) {
        // If the password is not entered, show an error message
        JOptionPane.showMessageDialog(this, "Please enter a password before proceeding.", 
                                      "Password Error", JOptionPane.ERROR_MESSAGE);
        return; // Exit the method as password is required
    }

    // Check if a file has been uploaded 
    String filePath = jTextField1.getText(); 

    if (filePath.isEmpty()) {
        // If no file is uploaded, show an error message
        JOptionPane.showMessageDialog(this, "Please upload a file before proceeding.", 
                                      "File Upload Error", JOptionPane.ERROR_MESSAGE);
        return; // Exit the method as the file is required
    }
    
      // Check which encryption algorithm is selected from the menu (AES, DES, RSA)
    String selectedAlgorithm = (String) jComboBox1.getSelectedItem();
    
     // If no algorithm is selected, default to AES
    if (selectedAlgorithm == null || selectedAlgorithm.isEmpty()) {
        selectedAlgorithm = "AES"; 
    }

    try {
        switch (selectedAlgorithm) {
            case "AES" -> encryptFileAES(filePath, password);
            case "DES" -> encryptFileDES(filePath, password);
            case "RSA" -> encryptFileRSA(filePath);
            default -> throw new IllegalArgumentException("Unsupported encryption algorithm: " + selectedAlgorithm);
        }
          // After encryption, show a success message
        JOptionPane.showMessageDialog(this, "File encrypted successfully using " + selectedAlgorithm + "!", 
                                      "Encryption Complete", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception e) {
        // Handle any errors during encryption
        JOptionPane.showMessageDialog(this, "Error during encryption: " + e.getMessage(), 
                                      "Encryption Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_jButton1ActionPerformed

    // Encrypts a file using AES

   public static void encryptFileAES(String filePath, char[] password) throws Exception {
    // Convert the password to a SecretKey object (AES key)
    SecretKeySpec secretKey = getSecretKeyFromPassword_AES(password);

    // Save the derived key to a file for decryption later
    saveKeyToFile(filePath + ".key_aes", secretKey.getEncoded());

    // Set up the AES cipher in ECB mode
    Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
    cipher.init(Cipher.ENCRYPT_MODE, secretKey);

    // Read the file to be encrypted
    File inputFile = new File(filePath);
    FileInputStream fileInputStream = new FileInputStream(inputFile);
    byte[] inputBytes = new byte[(int) inputFile.length()];
    fileInputStream.read(inputBytes);
    fileInputStream.close();

    // Encrypt the file content
    byte[] encryptedBytes = cipher.doFinal(inputBytes);

    // Convert encrypted bytes to Base64 string
    String base64EncryptedString = Base64.getEncoder().encodeToString(encryptedBytes);

    // Write the Base64 string to a new file
    String encryptedFilePath = filePath + ".encrypted_aes";
    FileWriter fileWriter = new FileWriter(encryptedFilePath);
    fileWriter.write(base64EncryptedString);
    fileWriter.close();
    System.out.println("File encrypted successfully using AES (Base64 encoded).");
}
   

// Convert the password into a SecretKeySpec (AES key)
private static SecretKeySpec getSecretKeyFromPassword_AES(char[] password) throws Exception {
    // Hash the password using SHA-256
    MessageDigest sha = MessageDigest.getInstance("SHA-256");
    byte[] keyBytes = sha.digest(new String(password).getBytes("UTF-8"));

    // Use the first 16 bytes of the hash for the AES key
    byte[] aesKey = new byte[16];
    System.arraycopy(keyBytes, 0, aesKey, 0, aesKey.length);

    return new SecretKeySpec(aesKey, "AES");
}

  // Encrypts a file using DES
public static void encryptFileDES(String filePath, char[] password) throws Exception {
    // Generate a DES key from the password
    SecretKeySpec secretKey = getSecretKeyFromPassword_DES(password);

    // Save the derived key to a file for decryption later
    saveKeyToFile(filePath + ".key_des", secretKey.getEncoded());

    // Initialize the DES cipher
    Cipher cipher = Cipher.getInstance("DES/ECB/PKCS5Padding");
    cipher.init(Cipher.ENCRYPT_MODE, secretKey);

    // Read the input file
    File inputFile = new File(filePath);
    FileInputStream fileInputStream = new FileInputStream(inputFile);
    byte[] inputBytes = new byte[(int) inputFile.length()];
    fileInputStream.read(inputBytes);
    fileInputStream.close();

    // Encrypt the file content
    byte[] encryptedBytes = cipher.doFinal(inputBytes);

    // Encode the encrypted bytes in Base64 format
    String encryptedBase64 = Base64.getEncoder().encodeToString(encryptedBytes);

    // Write the Base64 string to the encrypted file
    String encryptedFilePath = filePath + ".encrypted_des";
    try (FileWriter fileWriter = new FileWriter(encryptedFilePath)) {
        fileWriter.write(encryptedBase64);
    }

    System.out.println("File encrypted successfully using DES and stored in Base64 format.");
}

// Generate a DES key from the password
private static SecretKeySpec getSecretKeyFromPassword_DES(char[] password) throws Exception {
    // Hash the password using SHA-256
    MessageDigest sha = MessageDigest.getInstance("SHA-256");
    byte[] keyBytes = sha.digest(new String(password).getBytes("UTF-8"));

    // Use the first 8 bytes of the hash for the DES key
    byte[] desKey = new byte[8];
    System.arraycopy(keyBytes, 0, desKey, 0, desKey.length);

    return new SecretKeySpec(desKey, "DES");
}


// Encrypts a file using RSA
public static void encryptFileRSA(String filePath) throws Exception {
    // Generate RSA keys (public and private)
    KeyPair keyPair = generateRSAKeyPair();
    PublicKey publicKey = keyPair.getPublic();
    PrivateKey privateKey = keyPair.getPrivate();

    // Save the private key to a file for decryption
    saveKeyToFile(filePath + ".key_rsa", privateKey.getEncoded());

    // Read the input file
    File inputFile = new File(filePath);
    FileInputStream fileInputStream = new FileInputStream(inputFile);
    byte[] inputBytes = new byte[(int) inputFile.length()];
    fileInputStream.read(inputBytes);
    fileInputStream.close();

    // Encrypt the file content using RSA
    Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
    cipher.init(Cipher.ENCRYPT_MODE, publicKey);

    // RSA encrypts data in blocks
    int blockSize = 117; // For a 1024-bit RSA key
    ByteArrayOutputStream encryptedStream = new ByteArrayOutputStream();
    for (int i = 0; i < inputBytes.length; i += blockSize) {
        int length = Math.min(blockSize, inputBytes.length - i);
        byte[] encryptedBlock = cipher.doFinal(inputBytes, i, length);
        encryptedStream.write(encryptedBlock);
    }

    byte[] encryptedBytes = encryptedStream.toByteArray();
    encryptedStream.close();

    // Encode the encrypted bytes in Base64
    String encryptedBase64 = Base64.getEncoder().encodeToString(encryptedBytes);

    // Write the Base64 string to the encrypted file
    String encryptedFilePath = filePath + ".encrypted_rsa";
    try (FileWriter fileWriter = new FileWriter(encryptedFilePath)) {
        fileWriter.write(encryptedBase64);
    }

    System.out.println("File encrypted successfully using RSA in Base64 format.");
}

// Generate an RSA key pair ( private keys)
private static KeyPair generateRSAKeyPair() throws Exception {
    KeyPairGenerator keyGen = KeyPairGenerator.getInstance("RSA");
    keyGen.initialize(1024); // 1024-bit RSA key
    return keyGen.generateKeyPair();
}


// Save a private key to a file
private static void saveKeyToFile(String fileName, byte[] keyBytes) throws IOException {
    FileOutputStream keyOutputStream = new FileOutputStream(fileName);
    keyOutputStream.write(keyBytes);
    keyOutputStream.close();
}



    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
// Open a JFileChooser dialog for file selection
    JFileChooser fileChooser = new JFileChooser();
    
    // Set the file chooser to open files only 
    fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

    // Show the file chooser dialog and capture the return value
    int returnValue = fileChooser.showOpenDialog(this); // 'this' refers to the current frame

    // Check if a file was selected
    if (returnValue == JFileChooser.APPROVE_OPTION) {
        // Get the selected file
        java.io.File selectedFile = fileChooser.getSelectedFile();
        
        // Set the file path to jTextField1
        jTextField1.setText(selectedFile.getAbsolutePath()); // Display the  path of the selected file
        
        // Show a success pop-up message
        JOptionPane.showMessageDialog(this, "File Uploaded Successfully: " + selectedFile.getName(), 
                                      "File Upload", JOptionPane.INFORMATION_MESSAGE);
    } 
    
    else {
        // If no file is selected, show a cancellation message
        System.out.println("File selection cancelled.");
    }

    }//GEN-LAST:event_jButton3ActionPerformed

    
 // AES Decryption Method
public static void decryptFileAES(String encryptedFilePath, char[] password) throws Exception {
    // Convert the password to a SecretKey 
    SecretKeySpec secretKey = getSecretKeyFromPassword_AES(password);

    // Read the Base64 encoded encrypted file
    File encryptedFile = new File(encryptedFilePath);
    BufferedReader bufferedReader = new BufferedReader(new FileReader(encryptedFile));
    String base64EncryptedString = bufferedReader.readLine();
    bufferedReader.close();

    // Decode Base64 string to binary
    byte[] encryptedBytes = Base64.getDecoder().decode(base64EncryptedString);

    // Set up the AES cipher in ECB mode
    Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
    cipher.init(Cipher.DECRYPT_MODE, secretKey);

    // Decrypt the file content
    byte[] decryptedBytes = cipher.doFinal(encryptedBytes);

    // Write the decrypted bytes to a new file
    String decryptedFilePath = encryptedFilePath.replace(".encrypted_aes", ".decrypted");
    FileOutputStream fileOutputStream = new FileOutputStream(decryptedFilePath);
    fileOutputStream.write(decryptedBytes);
    fileOutputStream.close();

    System.out.println("File decrypted successfully.");
}


public static void decryptFileDES(String filePath, char[] password) throws Exception {
    // Load the saved DES key
    byte[] savedKey = loadKeyFromFile(filePath.replace(".encrypted_des", ".key_des"));
    SecretKeySpec secretKey = getSecretKeyFromPassword_DES(password);

    // Validate the password
    if (!Arrays.equals(savedKey, secretKey.getEncoded())) {
        throw new Exception("Incorrect password for DES decryption.");
    }

    // Read the Base64-encoded encrypted file content
    File encryptedFile = new File(filePath);
    StringBuilder encryptedBase64 = new StringBuilder();
    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(encryptedFile))) {
        String line;
        while ((line = bufferedReader.readLine()) != null) {
            encryptedBase64.append(line);
        }
    }

    // Decode the Base64 string to get the encrypted bytes
    byte[] encryptedBytes = Base64.getDecoder().decode(encryptedBase64.toString());

    // Set up the DES cipher
    Cipher cipher = Cipher.getInstance("DES/ECB/PKCS5Padding");
    cipher.init(Cipher.DECRYPT_MODE, secretKey);

    // Decrypt the content
    byte[] decryptedBytes = cipher.doFinal(encryptedBytes);

    // Write the decrypted content to a new file
    String decryptedFilePath = filePath.replace(".encrypted_des", ".decrypted");
    try (FileOutputStream fileOutputStream = new FileOutputStream(decryptedFilePath)) {
        fileOutputStream.write(decryptedBytes);
    }

    System.out.println("File decrypted successfully using DES.");
}


public static void decryptFileRSA(String filePath) throws Exception {
    
// Load the saved RSA private key
    byte[] savedPrivateKeyBytes = loadKeyFromFile(filePath.replace(".encrypted_rsa", ".key_rsa"));
    PrivateKey privateKey = KeyFactory.getInstance("RSA")
                                      .generatePrivate(new PKCS8EncodedKeySpec(savedPrivateKeyBytes));

    // Read the Base64-encoded encrypted file content
    File encryptedFile = new File(filePath);
    StringBuilder encryptedBase64 = new StringBuilder();
    try (BufferedReader bufferedReader = new BufferedReader(new FileReader(encryptedFile))) {
        String line;
        while ((line = bufferedReader.readLine()) != null) {
            encryptedBase64.append(line);
        }
    }

    // Decode the Base64 string to get the encrypted bytes
    byte[] encryptedBytes = Base64.getDecoder().decode(encryptedBase64.toString());

    // Decrypt the content using the RSA private key
    Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
    cipher.init(Cipher.DECRYPT_MODE, privateKey);

    // RSA decrypts data in blocks
    int blockSize = 128; // For a 1024-bit RSA key
    ByteArrayOutputStream decryptedStream = new ByteArrayOutputStream();
    
    for (int i = 0; i < encryptedBytes.length; i += blockSize) {
        int length = Math.min(blockSize, encryptedBytes.length - i);
        byte[] decryptedBlock = cipher.doFinal(encryptedBytes, i, length);
        decryptedStream.write(decryptedBlock);
    }

    byte[] decryptedBytes = decryptedStream.toByteArray();
    decryptedStream.close();

    // Write the decrypted content to a new file
    String decryptedFilePath = filePath.replace(".encrypted_rsa", ".decrypted");
    try (FileOutputStream fileOutputStream = new FileOutputStream(decryptedFilePath)) {
        fileOutputStream.write(decryptedBytes);
    }
    System.out.println("File decrypted successfully using RSA and Base64 decoding.");
}


    
// Load a key from a file
private static byte[] loadKeyFromFile(String fileName) throws IOException {
    File keyFile = new File(fileName);
    FileInputStream keyInputStream = new FileInputStream(keyFile);
    byte[] keyBytes = new byte[(int) keyFile.length()];
    keyInputStream.read(keyBytes);
    keyInputStream.close();
    return keyBytes;
}

    
    private void jPasswordField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPasswordField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jPasswordField2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
   // TODO add your handling code here:
    if (jButton4.getText().equals("Show")) { // Password is masked
        jPasswordField2.setEchoChar((char) 0);       // Show password
        jButton4.setText("Hide");                 // Change button to "Hide" 
    } else {
        jPasswordField2.setEchoChar('\u2022');      // Mask password
        jButton4.setText("Show");                // Change button to "Show" 
    }//GEN-LAST:event_jButton4ActionPerformed
    }  
    
    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
      // Get the file path from jTextField1 
    String filePath = jTextField1.getText(); // Replace with your file path input field

    // Check if a file is selected
    if (filePath.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please select a file to decrypt.", 
                                      "File Selection Error", JOptionPane.ERROR_MESSAGE);
        return; // Exit the method as a file is required
    }

    // Check if the file has a valid encrypted file extension
    if (!(filePath.endsWith(".encrypted_aes") || filePath.endsWith(".encrypted_des") || filePath.endsWith(".encrypted_rsa"))) {
        JOptionPane.showMessageDialog(this, """
                                            Invalid file selected. Please select a file with one of the following extensions:
                                            .encrypted_aes, .encrypted_des, or .encrypted_rsa""", 
            "File Format Error", JOptionPane.ERROR_MESSAGE);
        return; // Exit the method as the file format is invalid
    }

    // Get the password from jPasswordField2
    char[] password = jPasswordField2.getPassword(); // Replace with your password input field

    // Check if a password is entered
    if (password == null || password.length == 0) {
        JOptionPane.showMessageDialog(this, "Please enter a password before decrypting the file.", 
                                      "Password Required", JOptionPane.ERROR_MESSAGE);
        return; 
    }

    // Determine the decryption method based on the file extension
    try {
        if (filePath.endsWith(".encrypted_aes")) {
            decryptFileAES(filePath, password);
        } else if (filePath.endsWith(".encrypted_des")) {
            decryptFileDES(filePath, password);
        } else if (filePath.endsWith(".encrypted_rsa")) {
            decryptFileRSA(filePath);
        }
        
        // Show a success message after decryption
        JOptionPane.showMessageDialog(this, "File decrypted successfully!", 
                                      "Decryption Complete", JOptionPane.INFORMATION_MESSAGE);
    } catch (Exception e) {
        // Handle any errors during decryption
        JOptionPane.showMessageDialog(this, "Error during decryption: " + e.getMessage(), 
                                      "Decryption Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new main().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPasswordField jPasswordField2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
